package com.hearthintellect.brazier.enums

object GameTag extends Enumeration {
  val IGNORE_DAMAGE = Value(1)
  val TAG_SCRIPT_DATA_NUM_1 = Value(2)
  val TAG_SCRIPT_DATA_NUM_2 = Value(3)
  val TAG_SCRIPT_DATA_ENT_1 = Value(4)
  val TAG_SCRIPT_DATA_ENT_2 = Value(5)
  val MISSION_EVENT = Value(6)
  val TIMEOUT = Value(7)
  val TURN_START = Value(8)
  val TURN_TIMER_SLUSH = Value(9)
  val PREMIUM = Value(12)
  val GOLD_REWARD_STATE = Value(13)
  val PLAYSTATE = Value(17)
  val LAST_AFFECTED_BY = Value(18)
  val STEP = Value(19)
  val TURN = Value(20)
  val FATIGUE = Value(22)
  val CURRENT_PLAYER = Value(23)
  val FIRST_PLAYER = Value(24)
  val RESOURCES_USED = Value(25)
  val RESOURCES = Value(26)
  val HERO_ENTITY = Value(27)
  val MAXHANDSIZE = Value(28)
  val STARTHANDSIZE = Value(29)
  val PLAYER_ID = Value(30)
  val TEAM_ID = Value(31)
  val TRIGGER_VISUAL = Value(32)
  val RECENTLY_ARRIVED = Value(33)
  val PROTECTED = Value(34)
  val PROTECTING = Value(35)
  val DEFENDING = Value(36)
  val PROPOSED_DEFENDER = Value(37)
  val ATTACKING = Value(38)
  val PROPOSED_ATTACKER = Value(39)
  val ATTACHED = Value(40)
  val EXHAUSTED = Value(43)
  val DAMAGE = Value(44)
  val HEALTH = Value(45)
  val ATK = Value(47)
  val COST = Value(48)
  val ZONE = Value(49)
  val CONTROLLER = Value(50)
  val OWNER = Value(51)
  val DEFINITION = Value(52)
  val ENTITY_ID = Value(53)
  val HISTORY_PROXY = Value(54)
  val COPY_DEATHRATTLE = Value(55)
  val COPY_DEATHRATTLE_INDEX = Value(56)
  val ELITE = Value(114)
  val MAXRESOURCES = Value(176)
  val CARD_SET = Value(183)
  val CARD_ID = Value(186)
  val DURABILITY = Value(187)
  val SILENCED = Value(188)
  val WINDFURY = Value(189)
  val TAUNT = Value(190)
  val STEALTH = Value(191)
  val SPELLPOWER = Value(192)
  val DIVINE_SHIELD = Value(194)
  val CHARGE = Value(197)
  val NEXT_STEP = Value(198)
  val CLASS = Value(199)
  val CARDRACE = Value(200)
  val FACTION = Value(201)
  val CARDTYPE = Value(202)
  val RARITY = Value(203)
  val STATE = Value(204)
  val SUMMONED = Value(205)
  val FREEZE = Value(208)
  val ENRAGED = Value(212)
  val OVERLOAD = Value(215)
  val LOYALTY = Value(216)
  val DEATHRATTLE = Value(217)
  val BATTLECRY = Value(218)
  val SECRET = Value(219)
  val COMBO = Value(220)
  val CANT_HEAL = Value(221)
  val CANT_DAMAGE = Value(222)
  val CANT_SET_ASIDE = Value(223)
  val CANT_REMOVE_FROM_GAME = Value(224)
  val CANT_READY = Value(225)
  val CANT_EXHAUST = Value(226)
  val CANT_ATTACK = Value(227)
  val CANT_TARGET = Value(228)
  val CANT_DESTROY = Value(229)
  val CANT_DISCARD = Value(230)
  val CANT_PLAY = Value(231)
  val CANT_DRAW = Value(232)
  val INCOMING_HEALING_MULTIPLIER = Value(233)
  val INCOMING_HEALING_ADJUSTMENT = Value(234)
  val INCOMING_HEALING_CAP = Value(235)
  val INCOMING_DAMAGE_MULTIPLIER = Value(236)
  val INCOMING_DAMAGE_ADJUSTMENT = Value(237)
  val INCOMING_DAMAGE_CAP = Value(238)
  val CANT_BE_HEALED = Value(239)
  val CANT_BE_DAMAGED = Value(240)
  val CANT_BE_SET_ASIDE = Value(241)
  val CANT_BE_REMOVED_FROM_GAME = Value(242)
  val CANT_BE_READIED = Value(243)
  val CANT_BE_EXHAUSTED = Value(244)
  val CANT_BE_ATTACKED = Value(245)
  val CANT_BE_TARGETED = Value(246)
  val CANT_BE_DESTROYED = Value(247)
  val CANT_BE_SUMMONING_SICK = Value(253)
  val FROZEN = Value(260)
  val JUST_PLAYED = Value(261)
  val LINKEDCARD = Value(262)
  val ZONE_POSITION = Value(263)
  val CANT_BE_FROZEN = Value(264)
  val COMBO_ACTIVE = Value(266)
  val CARD_TARGET = Value(267)
  val NUM_CARDS_PLAYED_THIS_TURN = Value(269)
  val CANT_BE_TARGETED_BY_OPPONENTS = Value(270)
  val NUM_TURNS_IN_PLAY = Value(271)
  val NUM_TURNS_LEFT = Value(272)
  val OUTGOING_DAMAGE_CAP = Value(273)
  val OUTGOING_DAMAGE_ADJUSTMENT = Value(274)
  val OUTGOING_DAMAGE_MULTIPLIER = Value(275)
  val OUTGOING_HEALING_CAP = Value(276)
  val OUTGOING_HEALING_ADJUSTMENT = Value(277)
  val OUTGOING_HEALING_MULTIPLIER = Value(278)
  val INCOMING_ABILITY_DAMAGE_ADJUSTMENT = Value(279)
  val INCOMING_COMBAT_DAMAGE_ADJUSTMENT = Value(280)
  val OUTGOING_ABILITY_DAMAGE_ADJUSTMENT = Value(281)
  val OUTGOING_COMBAT_DAMAGE_ADJUSTMENT = Value(282)
  val OUTGOING_ABILITY_DAMAGE_MULTIPLIER = Value(283)
  val OUTGOING_ABILITY_DAMAGE_CAP = Value(284)
  val INCOMING_ABILITY_DAMAGE_MULTIPLIER = Value(285)
  val INCOMING_ABILITY_DAMAGE_CAP = Value(286)
  val OUTGOING_COMBAT_DAMAGE_MULTIPLIER = Value(287)
  val OUTGOING_COMBAT_DAMAGE_CAP = Value(288)
  val INCOMING_COMBAT_DAMAGE_MULTIPLIER = Value(289)
  val INCOMING_COMBAT_DAMAGE_CAP = Value(290)
  val CURRENT_SPELLPOWER = Value(291)
  val ARMOR = Value(292)
  val MORPH = Value(293)
  val IS_MORPHED = Value(294)
  val TEMP_RESOURCES = Value(295)
  val OVERLOAD_OWED = Value(296)
  val NUM_ATTACKS_THIS_TURN = Value(297)
  val NEXT_ALLY_BUFF = Value(302)
  val MAGNET = Value(303)
  val FIRST_CARD_PLAYED_THIS_TURN = Value(304)
  val MULLIGAN_STATE = Value(305)
  val TAUNT_READY = Value(306)
  val STEALTH_READY = Value(307)
  val CHARGE_READY = Value(308)
  val CANT_BE_TARGETED_BY_ABILITIES = Value(311)
  val SHOULDEXITCOMBAT = Value(312)
  val CREATOR = Value(313)
  val CANT_BE_DISPELLED = Value(314)
  val PARENT_CARD = Value(316)
  val NUM_MINIONS_PLAYED_THIS_TURN = Value(317)
  val PREDAMAGE = Value(318)
  val ENCHANTMENT_BIRTH_VISUAL = Value(330)
  val ENCHANTMENT_IDLE_VISUAL = Value(331)
  val CANT_BE_TARGETED_BY_HERO_POWERS = Value(332)
  val HEALTH_MINIMUM = Value(337)
  val TAG_ONE_TURN_EFFECT = Value(338)
  val SILENCE = Value(339)
  val COUNTER = Value(340)
  val HAND_REVEALED = Value(348)
  val ADJACENT_BUFF = Value(350)
  val FORCED_PLAY = Value(352)
  val LOW_HEALTH_THRESHOLD = Value(353)
  val IGNORE_DAMAGE_OFF = Value(354)
  val SPELLPOWER_DOUBLE = Value(356)
  val HEALING_DOUBLE = Value(357)
  val NUM_OPTIONS_PLAYED_THIS_TURN = Value(358)
  val NUM_OPTIONS = Value(359)
  val TO_BE_DESTROYED = Value(360)
  val AURA = Value(362)
  val POISONOUS = Value(363)
  val HERO_POWER_DOUBLE = Value(366)
  val AI_MUST_PLAY = Value(367)
  val NUM_MINIONS_PLAYER_KILLED_THIS_TURN = Value(368)
  val NUM_MINIONS_KILLED_THIS_TURN = Value(369)
  val AFFECTED_BY_SPELL_POWER = Value(370)
  val EXTRA_DEATHRATTLES = Value(371)
  val START_WITH_1_HEALTH = Value(372)
  val IMMUNE_WHILE_ATTACKING = Value(373)
  val MULTIPLY_HERO_DAMAGE = Value(374)
  val MULTIPLY_BUFF_VALUE = Value(375)
  val CUSTOM_KEYWORD_EFFECT = Value(376)
  val TOPDECK = Value(377)
  val CANT_BE_TARGETED_BY_BATTLECRIES = Value(379)
  val SHOWN_HERO_POWER = Value(380)
  val DEATHRATTLE_RETURN_ZONE = Value(382)
  val STEADY_SHOT_CAN_TARGET = Value(383)
  val DISPLAYED_CREATOR = Value(385)
  val POWERED_UP = Value(386)
  val SPARE_PART = Value(388)
  val FORGETFUL = Value(389)
  val CAN_SUMMON_MAXPLUSONE_MINION = Value(390)
  val OBFUSCATED = Value(391)
  val BURNING = Value(392)
  val OVERLOAD_LOCKED = Value(393)
  val NUM_TIMES_HERO_POWER_USED_THIS_GAME = Value(394)
  val CURRENT_HEROPOWER_DAMAGE_BONUS = Value(395)
  val HEROPOWER_DAMAGE = Value(396)
  val LAST_CARD_PLAYED = Value(397)
  val NUM_FRIENDLY_MINIONS_THAT_DIED_THIS_TURN = Value(398)
  val NUM_CARDS_DRAWN_THIS_TURN = Value(399)
  val AI_ONE_SHOT_KILL = Value(400)
  val EVIL_GLOW = Value(401)
  val HIDE_COST = Value(402)
  val INSPIRE = Value(403)
  val RECEIVES_DOUBLE_SPELLDAMAGE_BONUS = Value(404)
  val HEROPOWER_ADDITIONAL_ACTIVATIONS = Value(405)
  val HEROPOWER_ACTIVATIONS_THIS_TURN = Value(406)
  val REVEALED = Value(410)
  val NUM_FRIENDLY_MINIONS_THAT_DIED_THIS_GAME = Value(412)
  val CANNOT_ATTACK_HEROES = Value(413)
  val LOCK_AND_LOAD = Value(414)
  val TREASURE = Value(415)
  val SHADOWFORM = Value(416)
  val NUM_FRIENDLY_MINIONS_THAT_ATTACKED_THIS_TURN = Value(417)
  val NUM_RESOURCES_SPENT_THIS_GAME = Value(418)
  val CHOOSE_BOTH = Value(419)
  val ELECTRIC_CHARGE_LEVEL = Value(420)
  val HEAVILY_ARMORED = Value(421)
  val DONT_SHOW_IMMUNE = Value(422)
  val HISTORY_PROXY_NO_BIG_CARD = Value(427)

  // Only in card definitions
  val Collectible = Value(321)
  val InvisibleDeathrattle = Value(335)
  val OneTurnEffect = Value(338)
  val ImmuneToSpellpower = Value(349)
  val AttackVisualType = Value(251)
  val DevState = Value(268)
  val GrantCharge = Value(355)
  val HealTarget = Value(361)

  // strings
  val CARDTEXT_INHAND = Value(184)
  val CARDNAME = Value(185)
  val CardTextInPlay = Value(252)
  val TARGETING_ARROW_TEXT = Value(325)
  val ARTISTNAME = Value(342)
  val LocalizationNotes = Value(344)
  val FLAVORTEXT = Value(351)
  val HOW_TO_EARN = Value(364)
  val HOW_TO_EARN_GOLDEN = Value(365)

  // Renamed
  val DEATH_RATTLE = DEATHRATTLE
  val DEATHRATTLE_SENDS_BACK_TO_DECK = DEATHRATTLE_RETURN_ZONE
  val RECALL = OVERLOAD
  val RECALL_OWED = OVERLOAD_OWED
  val TAG_HERO_POWER_DOUBLE = HERO_POWER_DOUBLE
  val TAG_AI_MUST_PLAY = AI_MUST_PLAY
  val OVERKILL = Value(380)

  // Deleted
  val DIVINE_SHIELD_READY = Value(314)

  // Missing, only present in logs
  val WEAPON = Value(334)

}

object EnchantmentVisual extends Enumeration {
  val INVALID = Value(0)
  val POSITIVE = Value(1)
  val NEGATIVE = Value(2)
  val NEUTRAL = Value(3)
}

object PlayReq extends Enumeration {
  val REQ_MINION_TARGET = Value(1)
  val REQ_FRIENDLY_TARGET = Value(2)
  val REQ_ENEMY_TARGET = Value(3)
  val REQ_DAMAGED_TARGET = Value(4)
  val REQ_ENCHANTED_TARGET = Value(5)
  val REQ_FROZEN_TARGET = Value(6)
  val REQ_CHARGE_TARGET = Value(7)
  val REQ_TARGET_MAX_ATTACK = Value(8)
  val REQ_NONSELF_TARGET = Value(9)
  val REQ_TARGET_WITH_RACE = Value(10)
  val REQ_TARGET_TO_PLAY = Value(11)
  val REQ_NUM_MINION_SLOTS = Value(12)
  val REQ_WEAPON_EQUIPPED = Value(13)
  val REQ_ENOUGH_MANA = Value(14)
  val REQ_YOUR_TURN = Value(15)
  val REQ_NONSTEALTH_ENEMY_TARGET = Value(16)
  val REQ_HERO_TARGET = Value(17)
  val REQ_SECRET_CAP = Value(18)
  val REQ_MINION_CAP_IF_TARGET_AVAILABLE = Value(19)
  val REQ_MINION_CAP = Value(20)
  val REQ_TARGET_ATTACKED_THIS_TURN = Value(21)
  val REQ_TARGET_IF_AVAILABLE = Value(22)
  val REQ_MINIMUM_ENEMY_MINIONS = Value(23)
  val REQ_TARGET_FOR_COMBO = Value(24)
  val REQ_NOT_EXHAUSTED_ACTIVATE = Value(25)
  val REQ_UNIQUE_SECRET = Value(26)
  val REQ_TARGET_TAUNTER = Value(27)
  val REQ_CAN_BE_ATTACKED = Value(28)
  val REQ_ACTION_PWR_IS_MASTER_PWR = Value(29)
  val REQ_TARGET_MAGNET = Value(30)
  val REQ_ATTACK_GREATER_THAN_0 = Value(31)
  val REQ_ATTACKER_NOT_FROZEN = Value(32)
  val REQ_HERO_OR_MINION_TARGET = Value(33)
  val REQ_CAN_BE_TARGETED_BY_SPELLS = Value(34)
  val REQ_SUBCARD_IS_PLAYABLE = Value(35)
  val REQ_TARGET_FOR_NO_COMBO = Value(36)
  val REQ_NOT_MINION_JUST_PLAYED = Value(37)
  val REQ_NOT_EXHAUSTED_HERO_POWER = Value(38)
  val REQ_CAN_BE_TARGETED_BY_OPPONENTS = Value(39)
  val REQ_ATTACKER_CAN_ATTACK = Value(40)
  val REQ_TARGET_MIN_ATTACK = Value(41)
  val REQ_CAN_BE_TARGETED_BY_HERO_POWERS = Value(42)
  val REQ_ENEMY_TARGET_NOT_IMMUNE = Value(43)
  val REQ_ENTIRE_ENTOURAGE_NOT_IN_PLAY = Value(44)
  val REQ_MINIMUM_TOTAL_MINIONS = Value(45)
  val REQ_MUST_TARGET_TAUNTER = Value(46)
  val REQ_UNDAMAGED_TARGET = Value(47)
  val REQ_CAN_BE_TARGETED_BY_BATTLECRIES = Value(48)
  val REQ_STEADY_SHOT = Value(49)
  val REQ_MINION_OR_ENEMY_HERO = Value(50)
  val REQ_TARGET_IF_AVAILABLE_AND_DRAGON_IN_HAND = Value(51)
  val REQ_LEGENDARY_TARGET = Value(52)
  val REQ_FRIENDLY_MINION_DIED_THIS_TURN = Value(53)
  val REQ_FRIENDLY_MINION_DIED_THIS_GAME = Value(54)
  val REQ_ENEMY_WEAPON_EQUIPPED = Value(55)
  val REQ_TARGET_IF_AVAILABLE_AND_MINIMUM_FRIENDLY_MINIONS = Value(56)
  val REQ_TARGET_WITH_BATTLECRY = Value(57)
  val REQ_TARGET_WITH_DEATHRATTLE = Value(58)
  val REQ_DRAG_TO_PLAY = Value(59)
}

object Zone extends Enumeration {
  val INVALID = Value(0)
  val PLAY = Value(1)
  val DECK = Value(2)
  val HAND = Value(3)
  val GRAVEYARD = Value(4)
  val REMOVEDFROMGAME = Value(5)
  val SETASIDE = Value(6)
  val SECRET = Value(7)

  // Not public
  val DISCARD = Value(-2)
}

object ChoiceType extends Enumeration {
  val INVALID = Value(0)
  val MULLIGAN = Value(1)
  val GENERAL = Value(2)
}

object GameType extends Enumeration {
  val GT_UNKNOWN = Value(0)
  val GT_VS_AI = Value(1)
  val GT_VS_FRIEND = Value(2)
  val GT_TUTORIAL = Value(4)
  val GT_ARENA = Value(5)
  val GT_TEST = Value(6)
  val GT_RANKED = Value(7)
  val GT_UNRANKED = Value(8)
  val GT_TAVERNBRAWL = Value(16)
  val GT_TB_2P_COOP = Value(18)
  val GT_LAST = Value(17)
}

object GoldRewardState extends Enumeration {
  val INVALID = Value(0)
  val ELIGIBLE = Value(1)
  val WRONG_GAME_TYPE = Value(2)
  val ALREADY_CAPPED = Value(3)
  val BAD_RATING = Value(4)
  val SHORT_GAME = Value(5)
  val OVER_CAIS = Value(6)
}

object MetaDataType extends Enumeration {
  val TARGET = Value(0)
  val DAMAGE = Value(1)
  val HEALING = Value(2)
  val JOUST = Value(3)

  // Renamed in 9786 from PowerHistoryMetaData.Type
  val META_TARGET = TARGET
  val META_DAMAGE = DAMAGE
  val MATE_HEALING = HEALING
}

object Mulligan extends Enumeration {
  val INVALID = Value(0)
  val INPUT = Value(1)
  val DEALING = Value(2)
  val WAITING = Value(3)
  val DONE = Value(4)
}

object OptionType extends Enumeration {
  val PASS = Value(1)
  val END_TURN = Value(2)
  val POWER = Value(3)
}

object PlayState extends Enumeration {
  val INVALID = Value(0)
  val PLAYING = Value(1)
  val WINNING = Value(2)
  val LOSING = Value(3)
  val WON = Value(4)
  val LOST = Value(5)
  val TIED = Value(6)
  val DISCONNECTED = Value(7)
  val CONCEDED = Value(8)

  // Renamed in 10833
  val QUIT = CONCEDED
}

object PowType extends Enumeration {
  val FULL_ENTITY = Value(1)
  val SHOW_ENTITY = Value(2)
  val HIDE_ENTITY = Value(3)
  val TAG_CHANGE = Value(4)
  val ACTION_START = Value(5)
  val ACTION_END = Value(6)
  val CREATE_GAME = Value(7)
  val META_DATA = Value(8)
}

object PowSubType extends Enumeration {
  val ATTACK = Value(1)
  val JOUST = Value(2)
  val POWER = Value(3)
  val TRIGGER = Value(5)
  val DEATHS = Value(6)
  val PLAY = Value(7)
  val FATIGUE = Value(8)

  // Removed
  val SCRIPT = Value(4)
  val ACTION = Value(99)

  // Renamed
  val CONTINUOUS = Value(2)
}

object State extends Enumeration {
  val INVALID = Value(0)
  val LOADING = Value(1)
  val RUNNING = Value(2)
  val COMPLETE = Value(3)
}

object Step extends Enumeration {
  val INVALID = Value(0)
  val BEGIN_FIRST = Value(1)
  val BEGIN_SHUFFLE = Value(2)
  val BEGIN_DRAW = Value(3)
  val BEGIN_MULLIGAN = Value(4)
  val MAIN_BEGIN = Value(5)
  val MAIN_READY = Value(6)
  val MAIN_RESOURCE = Value(7)
  val MAIN_DRAW = Value(8)
  val MAIN_START = Value(9)
  val MAIN_ACTION = Value(10)
  val MAIN_COMBAT = Value(11)
  val MAIN_END = Value(12)
  val MAIN_NEXT = Value(13)
  val FINAL_WRAPUP = Value(14)
  val FINAL_GAMEOVER = Value(15)
  val MAIN_CLEANUP = Value(16)
  val MAIN_START_TRIGGERS = Value(17)
}


