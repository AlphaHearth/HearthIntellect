package com.hearthintellect.brazier


package object enums {
  val TAG_NAMES = Map(
    GameTag.TRIGGER_VISUAL -> "TriggerVisual",
    GameTag.HEALTH -> "Health",
    GameTag.ATK -> "Atk",
    GameTag.COST -> "Cost",
    GameTag.ELITE -> "Elite",
    GameTag.CARD_SET -> "CardSet",
    GameTag.CARDTEXT_INHAND -> "CardTextInHand",
    GameTag.CARDNAME -> "CardName",
    GameTag.DURABILITY -> "Durability",
    GameTag.WINDFURY -> "Windfury",
    GameTag.TAUNT -> "Taunt",
    GameTag.STEALTH -> "Stealth",
    GameTag.SPELLPOWER -> "Spellpower",
    GameTag.DIVINE_SHIELD -> "Divine Shield",
    GameTag.CHARGE -> "Charge",
    GameTag.CLASS -> "Class",
    GameTag.CARDRACE -> "Race",
    GameTag.FACTION -> "Faction",
    GameTag.RARITY -> "Rarity",
    GameTag.CARDTYPE -> "CardType",
    GameTag.FREEZE -> "Freeze",
    GameTag.ENRAGED -> "Enrage",
    GameTag.RECALL -> "Recall",
    GameTag.DEATHRATTLE -> "Deathrattle",
    GameTag.BATTLECRY -> "Battlecry",
    GameTag.SECRET -> "Secret",
    GameTag.COMBO -> "Combo",
    GameTag.CANT_BE_DAMAGED -> "Cant Be Damaged",
    GameTag.AttackVisualType -> "AttackVisualType",
    GameTag.CardTextInPlay -> "CardTextInPlay",
    GameTag.DevState -> "DevState",
    GameTag.MORPH -> "Morph",
    GameTag.Collectible -> "Collectible",
    GameTag.TARGETING_ARROW_TEXT -> "TargetingArrowText",
    GameTag.ENCHANTMENT_BIRTH_VISUAL -> "EnchantmentBirthVisual",
    GameTag.ENCHANTMENT_IDLE_VISUAL -> "EnchantmentIdleVisual",
    GameTag.InvisibleDeathrattle -> "InvisibleDeathrattle",
    GameTag.TAG_ONE_TURN_EFFECT -> "OneTurnEffect",
    GameTag.SILENCE -> "Silence",
    GameTag.COUNTER -> "Counter",
    GameTag.ARTISTNAME -> "ArtistName",
    GameTag.ImmuneToSpellpower -> "ImmuneToSpellpower",
    GameTag.ADJACENT_BUFF -> "AdjacentBuff",
    GameTag.FLAVORTEXT -> "FlavorText",
    GameTag.HealTarget -> "HealTarget",
    GameTag.AURA -> "Aura",
    GameTag.POISONOUS -> "Poisonous",
    GameTag.HOW_TO_EARN -> "HowToGetThisCard",
    GameTag.HOW_TO_EARN_GOLDEN -> "HowToGetThisGoldCard",
    GameTag.AI_MUST_PLAY -> "AIMustPlay",
    GameTag.AFFECTED_BY_SPELL_POWER -> "AffectedBySpellPower",
    GameTag.SPARE_PART -> "SparePart"
  )

  val CRAFTING_COSTS = Map(
    Rarity.COMMON -> (40, 400),
    Rarity.RARE -> (100, 800),
    Rarity.EPIC -> (400, 1600),
    Rarity.LEGENDARY -> (1600, 3200)
  )

  val DISENCHANT_COSTS = Map(
    Rarity.COMMON -> (5, 50),
    Rarity.RARE -> (20, 100),
    Rarity.EPIC -> (100, 400),
    Rarity.LEGENDARY -> (400, 1600)
  )

  val TAG_TYPES = Map(
    GameTag.TRIGGER_VISUAL -> Type.BOOL,
    GameTag.ELITE -> Type.BOOL,
    GameTag.CARD_SET -> CardSet,
    GameTag.CARDTEXT_INHAND -> Type.LOCSTRING,
    GameTag.CARDNAME -> Type.LOCSTRING,
    GameTag.WINDFURY -> Type.BOOL,
    GameTag.TAUNT -> Type.BOOL,
    GameTag.STEALTH -> Type.BOOL,
    GameTag.SPELLPOWER -> Type.BOOL,
    GameTag.DIVINE_SHIELD -> Type.BOOL,
    GameTag.CHARGE -> Type.BOOL,
    GameTag.CLASS -> CardClass,
    GameTag.CARDRACE -> Race,
    GameTag.FACTION -> Faction,
    GameTag.RARITY -> Rarity,
    GameTag.CARDTYPE -> CardType,
    GameTag.FREEZE -> Type.BOOL,
    GameTag.ENRAGED -> Type.BOOL,
    GameTag.DEATHRATTLE -> Type.BOOL,
    GameTag.BATTLECRY -> Type.BOOL,
    GameTag.SECRET -> Type.BOOL,
    GameTag.COMBO -> Type.BOOL,
    GameTag.CANT_BE_DAMAGED -> Type.BOOL,
    // GameTag.AttackVisualType -> AttackVisualType,
    GameTag.CardTextInPlay -> Type.LOCSTRING,
    // GameTag.DevState -> DevState,
    GameTag.MORPH -> Type.BOOL,
    GameTag.Collectible -> Type.BOOL,
    GameTag.TARGETING_ARROW_TEXT -> Type.LOCSTRING,
    GameTag.ENCHANTMENT_BIRTH_VISUAL -> EnchantmentVisual,
    GameTag.ENCHANTMENT_IDLE_VISUAL -> EnchantmentVisual,
    GameTag.InvisibleDeathrattle -> Type.BOOL,
    GameTag.TAG_ONE_TURN_EFFECT -> Type.BOOL,
    GameTag.SILENCE -> Type.BOOL,
    GameTag.COUNTER -> Type.BOOL,
    GameTag.ARTISTNAME -> Type.LOCSTRING,
    GameTag.ImmuneToSpellpower -> Type.BOOL,
    GameTag.ADJACENT_BUFF -> Type.BOOL,
    GameTag.FLAVORTEXT -> Type.BOOL,
    GameTag.HealTarget -> Type.BOOL,
    GameTag.AURA -> Type.BOOL,
    GameTag.POISONOUS -> Type.BOOL,
    GameTag.HOW_TO_EARN -> Type.LOCSTRING,
    GameTag.HOW_TO_EARN_GOLDEN -> Type.LOCSTRING,
    GameTag.AI_MUST_PLAY -> Type.BOOL,
    GameTag.AFFECTED_BY_SPELL_POWER -> Type.BOOL,
    GameTag.SPARE_PART -> Type.BOOL,
    GameTag.PLAYSTATE -> PlayState,
    GameTag.ZONE -> Zone,
    GameTag.STEP -> Step,
    GameTag.NEXT_STEP -> Step,
    GameTag.STATE -> State,
    GameTag.MULLIGAN_STATE -> Mulligan
  )

  def LOCALIZED_TAGS = TAG_TYPES.filter(_._2 == Type.LOCSTRING).keys
}
